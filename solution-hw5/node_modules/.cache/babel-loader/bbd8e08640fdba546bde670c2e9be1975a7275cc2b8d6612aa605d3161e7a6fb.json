{"ast":null,"code":"class Roll {\n  constructor(newType, newPrice, newGlazing, newPackSize) {\n    this.type = newType;\n    this.price = newPrice;\n    this.glazing = newGlazing;\n    this.packSize = newPackSize;\n  }\n\n  /*\n    Basic method to calculate the price of a roll rather than updating the roll's\n    type price every time. This keeps me from needing to use magic numbers for\n    creating new rolls.\n  */\n  getPrice() {\n    return ((this.price + this.glazing.glazingPrice) * this.packSize.packPrice).toFixed(2);\n  }\n\n  // Basic stringify function for debugging\n  toString() {\n    return \"type: \" + this.type + \", price: \" + this.price + \", glazing: \" + this.glazing + \", packSize: \" + this.packSize + \"\\n\";\n  }\n}\n\n/*\n  Glaze class to keep options separate and standardized. Technically wouldn't\n  have needed to make it its own class, but this allows me to have a toString\n  method for easy debugging.\n*/\nclass Glaze {\n  constructor(newName, newPrice) {\n    this.optionName = \"\";\n    this.glazingPrice = 0.00;\n    this.optionName = newName;\n    this.glazingPrice = newPrice;\n  }\n\n  // Another basic string method for debugging\n  toString() {\n    return \"optionName: \" + this.optionName + \", glazingPrice: \" + this.glazingPrice;\n  }\n}\n\n// Basic class for pack size selection, see Glaze class justification above.\nclass Pack {\n  constructor(newOption, newPrice) {\n    this.packOption = newOption;\n    this.packPrice = newPrice;\n  }\n}","map":{"version":3,"names":["Roll","constructor","newType","newPrice","newGlazing","newPackSize","type","price","glazing","packSize","getPrice","glazingPrice","packPrice","toFixed","toString","Glaze","newName","optionName","Pack","newOption","packOption"],"sources":["/Users/rebekahjulicher/School/PUI/pui-homework/solution-hw4/src/js/HelperClasses.js"],"sourcesContent":["class Roll {\n  type;\n  price;\n  glazing;\n  packSize;\n\n  constructor(newType, newPrice, newGlazing, newPackSize){\n    this.type     = newType;\n    this.price    = newPrice;\n    this.glazing  = newGlazing;\n    this.packSize = newPackSize;\n  }\n\n  /*\n    Basic method to calculate the price of a roll rather than updating the roll's\n    type price every time. This keeps me from needing to use magic numbers for\n    creating new rolls.\n  */\n  getPrice(){\n    return ((this.price + this.glazing.glazingPrice) * this.packSize.packPrice).toFixed(2);\n  }\n\n  // Basic stringify function for debugging\n  toString(){\n    return \"type: \" + this.type + \", price: \" + this.price + \", glazing: \" \n            + this.glazing + \", packSize: \" + this.packSize + \"\\n\";\n  }\n}\n\n/*\n  Glaze class to keep options separate and standardized. Technically wouldn't\n  have needed to make it its own class, but this allows me to have a toString\n  method for easy debugging.\n*/\nclass Glaze {\n  optionName          = \"\";\n  glazingPrice        = 0.00;\n\n  constructor(newName, newPrice){\n    this.optionName   = newName;\n    this.glazingPrice = newPrice;\n  }\n\n  // Another basic string method for debugging\n  toString(){\n    return \"optionName: \" + this.optionName + \", glazingPrice: \" + this.glazingPrice;\n  }\n}\n\n// Basic class for pack size selection, see Glaze class justification above.\nclass Pack {\n  packOption;\n  packPrice;\n\n  constructor(newOption, newPrice){\n    this.packOption = newOption;\n    this.packPrice  = newPrice;\n  }\n}"],"mappings":"AAAA,MAAMA,IAAI,CAAC;EAMTC,WAAWA,CAACC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,EAAC;IACrD,IAAI,CAACC,IAAI,GAAOJ,OAAO;IACvB,IAAI,CAACK,KAAK,GAAMJ,QAAQ;IACxB,IAAI,CAACK,OAAO,GAAIJ,UAAU;IAC1B,IAAI,CAACK,QAAQ,GAAGJ,WAAW;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACEK,QAAQA,CAAA,EAAE;IACR,OAAO,CAAC,CAAC,IAAI,CAACH,KAAK,GAAG,IAAI,CAACC,OAAO,CAACG,YAAY,IAAI,IAAI,CAACF,QAAQ,CAACG,SAAS,EAAEC,OAAO,CAAC,CAAC,CAAC;EACxF;;EAEA;EACAC,QAAQA,CAAA,EAAE;IACR,OAAO,QAAQ,GAAG,IAAI,CAACR,IAAI,GAAG,WAAW,GAAG,IAAI,CAACC,KAAK,GAAG,aAAa,GAC5D,IAAI,CAACC,OAAO,GAAG,cAAc,GAAG,IAAI,CAACC,QAAQ,GAAG,IAAI;EAChE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMM,KAAK,CAAC;EAIVd,WAAWA,CAACe,OAAO,EAAEb,QAAQ,EAAC;IAAA,KAH9Bc,UAAU,GAAY,EAAE;IAAA,KACxBN,YAAY,GAAU,IAAI;IAGxB,IAAI,CAACM,UAAU,GAAKD,OAAO;IAC3B,IAAI,CAACL,YAAY,GAAGR,QAAQ;EAC9B;;EAEA;EACAW,QAAQA,CAAA,EAAE;IACR,OAAO,cAAc,GAAG,IAAI,CAACG,UAAU,GAAG,kBAAkB,GAAG,IAAI,CAACN,YAAY;EAClF;AACF;;AAEA;AACA,MAAMO,IAAI,CAAC;EAITjB,WAAWA,CAACkB,SAAS,EAAEhB,QAAQ,EAAC;IAC9B,IAAI,CAACiB,UAAU,GAAGD,SAAS;IAC3B,IAAI,CAACP,SAAS,GAAIT,QAAQ;EAC5B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}