{"ast":null,"code":"class Product {\n  constructor(newType, newGlazing, newPackSize, newPrice) {\n    this.type = newType;\n    this.glazing = newGlazing;\n    this.packSize = newPackSize;\n    this.price = newPrice;\n  }\n\n  // Basic stringify function for debugging\n  toString() {\n    return \"type: \" + this.type + \", price: \" + this.price + \", glazing: \" + this.glazing + \", packSize: \" + this.packSize + \"\\n\";\n  }\n}\n\n/*\n  Glaze class to keep options separate and standardized. Technically wouldn't\n  have needed to make it its own class, but this allows me to have a toString\n  method for easy debugging.\n*/\nclass Glaze {\n  constructor(newName, newPrice) {\n    this.optionName = \"\";\n    this.glazingPrice = 0.00;\n    this.optionName = newName;\n    this.glazingPrice = newPrice;\n  }\n\n  // String method for debugging\n  toString() {\n    return \"optionName: \" + this.optionName + \", glazingPrice: \" + this.glazingPrice;\n  }\n}\n\n// Basic class for pack size selection, see Glaze class justification above.\nclass Pack {\n  constructor(newOption, newPrice) {\n    this.packOption = newOption;\n    this.packPrice = newPrice;\n  }\n}\n\n// Class to hold deeper metadata for each type of roll\nclass Type {\n  constructor(newTypeName, newTypeID, newImgSrc, newImgAlt, newBasePrice) {\n    this.typeName = newTypeName;\n    this.typeID = newTypeID;\n    this.imgSrc = newImgSrc;\n    this.imgAlt = newImgAlt;\n    this.basePrice = newBasePrice;\n  }\n}\n\n// Array/List to hold glazes.\nlet glazingOptions = [new Glaze(\"Keep original\", 0.00), new Glaze(\"Sugar milk\", 0.00), new Glaze(\"Vanilla milk\", 0.50), new Glaze(\"Double chocolate\", 1.50)];\n\n// Array/List to hold pack sizes.\nlet packSizeOptions = [new Pack(1, 1), new Pack(3, 3), new Pack(6, 5), new Pack(12, 10)];\n\n// Array/List to hold type info so I don't have magic numbers all over the place.\nlet typeOptions = [new Type(\"Original cinnamon roll\", \"original\", \"./products/original-cinnamon-roll.jpg\", \"Cinnamon roll with glaze and cinnamon stick\", 2.49), new Type(\"Apple cinnamon roll\", \"apple\", \"./products/apple-cinnamon-roll.jpg\", \"Cinnamon roll with glaze and apples\", 3.49), new Type(\"Raisin cinnamon roll\", \"raisin\", \"./products/raisin-cinnamon-roll.jpg\", \"Cinnamon roll with glaze and raisins\", 2.99), new Type(\"Walnut cinnamon roll\", \"walnut\", \"./products/walnut-cinnamon-roll.jpg\", \"Cinnamon roll with glaze and walnuts\", 3.49), new Type(\"Double-chocolate cinnamon roll\", \"double-chocolate\", \"./products/double-chocolate-cinnamon-roll.jpg\", \"Cinnamon roll with glaze and chocolate\", 3.99), new Type(\"Strawberry cinnamon roll\", \"strawberry\", \"./products/strawberry-cinnamon-roll.jpg\", \"Cinnamon roll with glaze and strawberries\", 3.99)];\nexport { Product, Glaze, Pack, glazingOptions, packSizeOptions, typeOptions };","map":{"version":3,"names":["Product","constructor","newType","newGlazing","newPackSize","newPrice","type","glazing","packSize","price","toString","Glaze","newName","optionName","glazingPrice","Pack","newOption","packOption","packPrice","Type","newTypeName","newTypeID","newImgSrc","newImgAlt","newBasePrice","typeName","typeID","imgSrc","imgAlt","basePrice","glazingOptions","packSizeOptions","typeOptions"],"sources":["/Users/rebekahjulicher/School/PUI/pui-homework/solution-hw4/src/js/HelperStructs.js"],"sourcesContent":["\n\nclass Product {\n  type;\n  glazing;\n  packSize;\n  price;\n\n  constructor(newType, newGlazing, newPackSize, newPrice){\n    this.type     = newType;\n    this.glazing  = newGlazing;\n    this.packSize = newPackSize;\n    this.price    = newPrice;\n  }\n\n  // Basic stringify function for debugging\n  toString(){\n    return \"type: \" + this.type + \", price: \" + this.price + \", glazing: \" \n            + this.glazing + \", packSize: \" + this.packSize + \"\\n\";\n  }\n}\n\n/*\n  Glaze class to keep options separate and standardized. Technically wouldn't\n  have needed to make it its own class, but this allows me to have a toString\n  method for easy debugging.\n*/\nclass Glaze {\n  optionName          = \"\";\n  glazingPrice        = 0.00;\n\n  constructor(newName, newPrice){\n    this.optionName   = newName;\n    this.glazingPrice = newPrice;\n  }\n\n  // String method for debugging\n  toString(){\n    return \"optionName: \" + this.optionName + \", glazingPrice: \" + this.glazingPrice;\n  }\n}\n\n// Basic class for pack size selection, see Glaze class justification above.\nclass Pack {\n  packOption;\n  packPrice;\n\n  constructor(newOption, newPrice){\n    this.packOption = newOption;\n    this.packPrice  = newPrice;\n  }\n}\n\n// Class to hold deeper metadata for each type of roll\nclass Type {\n  typeName;\n  typeID;\n  imgSrc;\n  imgAlt;\n  basePrice;\n\n  constructor(newTypeName, newTypeID, newImgSrc, newImgAlt, newBasePrice){\n    this.typeName   = newTypeName;\n    this.typeID     = newTypeID;\n    this.imgSrc     = newImgSrc;\n    this.imgAlt     = newImgAlt;\n    this.basePrice  = newBasePrice;\n  }\n}\n\n// Array/List to hold glazes.\nlet glazingOptions  = [new Glaze(\"Keep original\", 0.00),\n                        new Glaze(\"Sugar milk\", 0.00),\n                        new Glaze(\"Vanilla milk\", 0.50),\n                        new Glaze(\"Double chocolate\", 1.50)];\n\n// Array/List to hold pack sizes.\nlet packSizeOptions = [new Pack(1, 1), new Pack(3, 3), new Pack(6, 5), new Pack(12, 10)];\n\n// Array/List to hold type info so I don't have magic numbers all over the place.\nlet typeOptions     = [new Type(\"Original cinnamon roll\" , \"original\",\n                                  \"./products/original-cinnamon-roll.jpg\", \n                                  \"Cinnamon roll with glaze and cinnamon stick\", 2.49),\n                        new Type(\"Apple cinnamon roll\", \"apple\",\n                                  \"./products/apple-cinnamon-roll.jpg\",\n                                  \"Cinnamon roll with glaze and apples\", 3.49),\n                        new Type(\"Raisin cinnamon roll\", \"raisin\",\n                                  \"./products/raisin-cinnamon-roll.jpg\",\n                                  \"Cinnamon roll with glaze and raisins\", 2.99),\n                        new Type(\"Walnut cinnamon roll\", \"walnut\",\n                                  \"./products/walnut-cinnamon-roll.jpg\",\n                                  \"Cinnamon roll with glaze and walnuts\", 3.49),\n                        new Type(\"Double-chocolate cinnamon roll\", \"double-chocolate\",\n                                  \"./products/double-chocolate-cinnamon-roll.jpg\",\n                                  \"Cinnamon roll with glaze and chocolate\", 3.99),\n                        new Type(\"Strawberry cinnamon roll\", \"strawberry\",\n                                  \"./products/strawberry-cinnamon-roll.jpg\",\n                                  \"Cinnamon roll with glaze and strawberries\", 3.99)];\n\nexport {Product, Glaze, Pack, glazingOptions, packSizeOptions, typeOptions};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}